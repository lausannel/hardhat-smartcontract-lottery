/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscription_Id",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETHEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpkeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "checkData",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmations",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b50604051620019e5380380620019e58339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160006101000a81548160ff02191690836001811115620001195762000118620002b5565b5b0217905550426002819055508061014081815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000168565b95505060406200020389828a0162000151565b94505060606200021689828a0162000196565b93505060806200022989828a016200017f565b92505060a06200023c89828a0162000168565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516115fe620003e7600039600081816108290152610897015260006106d9015260006106b60152600061069501526000610659015260008181610338015261043501526000818161037501526103c901526115fe6000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063e55ae4e814610263578063fa10c297146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e991906111cd565b60405180910390f35b3480156100fe57600080fd5b5061010761035c565b6040516101149190611175565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610f30565b610373565b005b61014e610433565b005b34801561015c57600080fd5b5061017760048036038101906101729190610e40565b6105a2565b005b34801561018557600080fd5b5061018e6107ab565b60405161019b91906110ae565b60405180910390f35b3480156101b057600080fd5b506101b96107d5565b6040516101c6919061121f565b60405180910390f35b3480156101db57600080fd5b506101e46107de565b6040516101f191906111b2565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610e8d565b6107e7565b60405161022f9291906110f2565b60405180910390f35b34801561024457600080fd5b5061024d610893565b60405161025a91906111cd565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190610ed6565b6108bb565b60405161029791906110ae565b60405180910390f35b3480156102ac57600080fd5b506102b5610902565b6040516102c291906111cd565b60405180910390f35b3480156102d757600080fd5b506102e061090c565b6040516102ed91906111cd565b60405180910390f35b60006103366040518060400160405280600c81526020017f49207761732063616c6c65640000000000000000000000000000000000000000815250610918565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161041c9291906110c9565b60405180910390fd5b61042f82826109b1565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561048d576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a1576104a06114de565b5b600160009054906101000a900460ff1660018111156104c3576104c26114de565b5b146104fa576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105bc604051806020016040528060008152506107e7565b5090508061062b5747600080549050600160009054906101000a900460ff1660018111156105ed576105ec6114de565b5b6040517f584327aa000000000000000000000000000000000000000000000000000000008152600401610622939291906111e8565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156106505761064f6114de565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161071a959493929190611122565b602060405180830381600087803b15801561073457600080fd5b505af1158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c9190610f03565b90507fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef818160405161079d91906111cd565b60405180910390a150505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001905090565b60006003905090565b600060606000806001811115610800576107ff6114de565b5b600160009054906101000a900460ff166001811115610822576108216114de565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261085691906112ff565b119050600080600080549050119050600080471190508380156108765750825b801561087f5750815b80156108885750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108d0576108cf61150d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b6109ae8160405160240161092c9190611190565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610be2565b50565b60008080549050826000815181106109cc576109cb61150d565b5b60200260200101516109de919061144f565b905060008082815481106109f5576109f461150d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4890611099565b60006040518083038185875af1925050503d8060008114610a85576040519150601f19603f3d011682016040523d82523d6000602084013e610a8a565b606091505b5050905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff02191690836001811115610af557610af46114de565b5b0217905550600067ffffffffffffffff811115610b1557610b1461153c565b5b604051908082528060200260200182016040528015610b435781602001602082028036833780820191505090505b5060009080519060200190610b59929190610c0b565b504260028190555080610b98576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054828255906000526020600020908101928215610c84579160200282015b82811115610c835782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c2b565b5b509050610c919190610c95565b5090565b5b80821115610cae576000816000905550600101610c96565b5090565b6000610cc5610cc08461125f565b61123a565b90508083825260208201905082856020860282011115610ce857610ce7611575565b5b60005b85811015610d185781610cfe8882610e16565b845260208401935060208301925050600181019050610ceb565b5050509392505050565b6000610d35610d308461128b565b61123a565b905082815260208101848484011115610d5157610d5061157a565b5b610d5c8482856113dc565b509392505050565b600082601f830112610d7957610d78611570565b5b8135610d89848260208601610cb2565b91505092915050565b60008083601f840112610da857610da7611570565b5b8235905067ffffffffffffffff811115610dc557610dc461156b565b5b602083019150836001820283011115610de157610de0611575565b5b9250929050565b600082601f830112610dfd57610dfc611570565b5b8135610e0d848260208601610d22565b91505092915050565b600081359050610e25816115b1565b92915050565b600081519050610e3a816115b1565b92915050565b60008060208385031215610e5757610e56611584565b5b600083013567ffffffffffffffff811115610e7557610e7461157f565b5b610e8185828601610d92565b92509250509250929050565b600060208284031215610ea357610ea2611584565b5b600082013567ffffffffffffffff811115610ec157610ec061157f565b5b610ecd84828501610de8565b91505092915050565b600060208284031215610eec57610eeb611584565b5b6000610efa84828501610e16565b91505092915050565b600060208284031215610f1957610f18611584565b5b6000610f2784828501610e2b565b91505092915050565b60008060408385031215610f4757610f46611584565b5b6000610f5585828601610e16565b925050602083013567ffffffffffffffff811115610f7657610f7561157f565b5b610f8285828601610d64565b9150509250929050565b610f9581611333565b82525050565b610fa481611345565b82525050565b610fb381611351565b82525050565b6000610fc4826112bc565b610fce81856112d2565b9350610fde8185602086016113eb565b610fe781611589565b840191505092915050565b610ffb816113ca565b82525050565b600061100c826112c7565b61101681856112ee565b93506110268185602086016113eb565b61102f81611589565b840191505092915050565b60006110476000836112e3565b91506110528261159a565b600082019050919050565b6110668161136e565b82525050565b6110758161139c565b82525050565b611084816113a6565b82525050565b611093816113b6565b82525050565b60006110a48261103a565b9150819050919050565b60006020820190506110c36000830184610f8c565b92915050565b60006040820190506110de6000830185610f8c565b6110eb6020830184610f8c565b9392505050565b60006040820190506111076000830185610f9b565b81810360208301526111198184610fb9565b90509392505050565b600060a0820190506111376000830188610faa565b611144602083018761108a565b611151604083018661105d565b61115e606083018561107b565b61116b608083018461107b565b9695505050505050565b600060208201905061118a6000830184610ff2565b92915050565b600060208201905081810360008301526111aa8184611001565b905092915050565b60006020820190506111c7600083018461105d565b92915050565b60006020820190506111e2600083018461106c565b92915050565b60006060820190506111fd600083018661106c565b61120a602083018561106c565b611217604083018461106c565b949350505050565b6000602082019050611234600083018461107b565b92915050565b6000611244611255565b9050611250828261141e565b919050565b6000604051905090565b600067ffffffffffffffff82111561127a5761127961153c565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112a6576112a561153c565b5b6112af82611589565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061130a8261139c565b91506113158361139c565b92508282101561132857611327611480565b5b828203905092915050565b600061133e8261137c565b9050919050565b60008115159050919050565b6000819050919050565b60008190506113698261159d565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113d58261135b565b9050919050565b82818337600083830152505050565b60005b838110156114095780820151818401526020810190506113ee565b83811115611418576000848401525b50505050565b61142782611589565b810181811067ffffffffffffffff821117156114465761144561153c565b5b80604052505050565b600061145a8261139c565b91506114658361139c565b925082611475576114746114af565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115ae576115ad6114de565b5b50565b6115ba8161139c565b81146115c557600080fd5b5056fea26469706673582212209e8488bd13dbb597d035a5376f51f9a6e413f226ea30d02a46d1acdb46fb236f64736f6c63430008070033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    _entranceFee: PromiseOrValue<BigNumberish>,
    keyHash: PromiseOrValue<BytesLike>,
    subscription_Id: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinatorV2,
      _entranceFee,
      keyHash,
      subscription_Id,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    _entranceFee: PromiseOrValue<BigNumberish>,
    keyHash: PromiseOrValue<BytesLike>,
    subscription_Id: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      _entranceFee,
      keyHash,
      subscription_Id,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
